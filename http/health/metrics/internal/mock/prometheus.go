// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/prometheus/client_golang/prometheus (interfaces: Gatherer)

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	go0 "github.com/prometheus/client_model/go"
	reflect "reflect"
)

// Gatherer is a mock of Gatherer interface
type Gatherer struct {
	ctrl     *gomock.Controller
	recorder *GathererMockRecorder
}

// GathererMockRecorder is the mock recorder for Gatherer
type GathererMockRecorder struct {
	mock *Gatherer
}

// NewGatherer creates a new mock instance
func NewGatherer(ctrl *gomock.Controller) *Gatherer {
	mock := &Gatherer{ctrl: ctrl}
	mock.recorder = &GathererMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Gatherer) EXPECT() *GathererMockRecorder {
	return m.recorder
}

// Gather mocks base method
func (m *Gatherer) Gather() ([]*go0.MetricFamily, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Gather")
	ret0, _ := ret[0].([]*go0.MetricFamily)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Gather indicates an expected call of Gather
func (mr *GathererMockRecorder) Gather() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gather", reflect.TypeOf((*Gatherer)(nil).Gather))
}
